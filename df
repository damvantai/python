[1mdiff --cc deep_learning_with_pytorch_a_60_minute_blitz/autograd_tutorial.py[m
[1mindex f9c925b,288263b..0000000[m
[1m--- a/deep_learning_with_pytorch_a_60_minute_blitz/autograd_tutorial.py[m
[1m+++ b/deep_learning_with_pytorch_a_60_minute_blitz/autograd_tutorial.py[m
[36m@@@ -16,3 -16,33 +16,36 @@@[m [mz = y * y * [m
  out = z.mean()[m
  [m
  print(z, out)[m
[32m++<<<<<<< HEAD[m
[32m++=======[m
[32m+ [m
[32m+ # Gradients[m
[32m+ out.backward()[m
[32m+ [m
[32m+ # print gradients d(out)/dx[m
[32m+ print(x.grad)[m
[32m+ [m
[32m+ x = torch.randn(3)[m
[32m+ x = Variable(x, requires_grad=True)[m
[32m+ [m
[32m+ print(x)[m
[32m+ y = x * 2[m
[32m+ print("y")[m
[32m+ print(y)[m
[32m+ while y.data.norm() < 2000:[m
[32m+ 	y = y * 2[m
[32m+ 	print('--')[m
[32m+ 	print(y)[m
[32m+ [m
[32m+ print(y)[m
[32m+ [m
[32m+ # gradients = torch.FloatTensor([0.1, 1.0, 0.0001])[m
[32m+ # print(gradients)[m
[32m+ # y.backward(gradients)[m
[32m+ # print(x.grad)[m
[32m+ [m
[32m+ # print(x.grad)[m
[32m+ [m
[32m+ y.backward(torch.Tensor([1.0]))[m
[32m+ print(x.grad)[m
[32m++>>>>>>> pytorch[m
